# Gitlab component for triggering and delegating to a child pipeline
spec:
  inputs:
    service:
---
before_script:
  - printenv

"setup-$[[ inputs.service ]]":
  variables:
    RELEASE_IF1: "$CI_COMMIT_TAG =~ /^$[[ inputs.service ]]-v(\\d+.){1,2}\\d+/ig"
    RELEASE_IF2: "$CI_COMMIT_REF_SLUG =~ /^$[[ inputs.service ]]-v(\\d+.){1,2}\\d+/ig"
    RELEASE_IF3: "$DOCKER_ENV_CI_COMMIT_TAG =~ /^$[[ inputs.service ]]-v(\\d+.){1,2}\\d+/ig"
    RELEASE_IF4: "$DOCKER_ENV_CI_COMMIT_REF_SLUG =~ /^$[[ inputs.service ]]-v(\\d+.){1,2}\\d+/ig"
  stage: trigger
  script:
    - printenv

"debug-$[[ inputs.service ]]":
  stage: trigger
  script:
    - eval $RELEASE

"trigger-$[[ inputs.service ]]":
  needs: ["setup-$[[ inputs.service ]]"]
  stage: trigger
  rules:
    # NOTE: changes will always evaluate as true for tag pipelines, hence repitition
    #       trigger if a merge request is made containing changes for the service
    - if: '($CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_TAG == null)'
      changes:
        paths:
          - "$[[ inputs.service ]]/**"
    # trigger on all pushes to main containing changes but NOT tags
    - if: '($CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG == null)'
      changes:
        paths:
          - "$[[ inputs.service ]]/**"

    # trigger if tag is created that matches the release pattern for the service
    - if: $RELEASE_IF1
    - if: $RELEASE_IF2
    - if: $RELEASE_IF3
    - if: $RELEASE_IF4

  trigger:
    include: "$[[ inputs.service ]]/.*-ci.yml"
    strategy: depend
