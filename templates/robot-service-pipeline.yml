# component-ish template for multi-arch robot services
spec:
  inputs:
    service:
    platforms:
      default: "linux/amd64,linux/arm64,linux/arm/v7"
---
workflow:
  rules:
    - exists:
        - "$[[ inputs.service ]]/Dockerfile"

image: docker

services:
  - docker:dind

default:
  tags: ["docker-build"]

stages:
  - build
  - release

variables:
  RELEASE_PATTERN: "/$[[ inputs.service ]]*/i"

before_script:
  - printenv
  - "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
  - cd "$[[ inputs.service ]]"

".$[[ inputs.service ]]-base-rules":
  rules:
    - if: '($CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_TAG == null)'
      changes:
        - "$[[ inputs.service ]]/**"
    - if: '($CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG == null)'
      changes:
        - "$[[ inputs.service ]]/**"

".$[[ inputs.service ]]-build-rules":
  extends: ".$[[ inputs.service ]]-base-rules":

".$[[ inputs.service ]]-release-rules":
  rules:
    - if: "$CI_COMMIT_TAG =~ $RELEASE_PATTERN"
    - if: "$CI_COMMIT_REF_SLUG =~ $RELEASE_PATTERN"
    - if: "$DOCKER_ENV_CI_COMMIT_TAG =~ $RELEASE_PATTERN"
    - if: "$DOCKER_ENV_CI_COMMIT_REF_SLUG =~ $RELEASE_PATTERN"

"build-$[[ inputs.service ]]":
  extends: ".$[[ inputs.service ]]-build-rules"
  stage: build
  script:
    - "docker build ."

"release-$[[ inputs.service ]]":
  extends: ".$[[ inputs.service ]]-release-rules"
  stage: release
  script:
    - cd "$[[ inputs.service ]]"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - docker run --privileged --rm tonistiigi/binfmt --install all
    - docker context create builder
    - docker buildx create builder --use
    - docker buildx build --platform "$[[ inputs.platforms ]]" -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG" --push .
